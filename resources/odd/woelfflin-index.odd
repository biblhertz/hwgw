<?teipublisher output="web"?><TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en"><teiHeader><fileDesc>
            <titleStmt><title>Wölfflin - index</title></titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc><encodingDesc><tagsDecl><rendition source="../css/dynamic-index.css"/></tagsDecl></encodingDesc><revisionDesc>
            <change when="2020-04-27+17:00">Initial version</change>
        </revisionDesc></teiHeader><text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="woelfflin" source="woelfflin-base.odd">
                
                <elementSpec ident="teiHeader" mode="change"><model output="web" predicate="$parameters?header='short'" behaviour="block"/><model output="web" behaviour="metadata"/></elementSpec>
                
                <elementSpec ident="head" mode="change"><model predicate="parent::object" behaviour="heading"/><model predicate="$parameters?mode='toc'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)][not(ancestor::note)]), '^(.*?)[^\w]*$', '$1')"/>
        </model><model predicate="$parameters?header='short'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
        </model><model predicate="parent::figure" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model><model predicate="parent::table" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model><model predicate="parent::lg" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model><model predicate="parent::list" behaviour="block">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model><model predicate="parent::div" behaviour="heading" useSourceRendition="true">
            <param name="level" value="count(ancestor::div)"/>
        </model><model behaviour="block"/></elementSpec>
                
                <elementSpec ident="item" mode="change"><model predicate="@rend=&#34;list-stroke&#34;" behaviour="listItem">
            <outputRendition xml:space="preserve" scope="before">
            content: '– '
            </outputRendition>
        </model><model behaviour="listItem" useSourceRendition="true"/></elementSpec>
                
                <elementSpec ident="bibl" mode="change"><model predicate="@type=&#34;full&#34;" behaviour="inline">
            <desc>Description in dropdown.</desc>
            <param name="link" value="concat(&#34;../bibliography.xml#&#34;, parent::bibl/@xml:id)"/>
            <param name="desc" value="node()"/>
            <pb:template xmlns="" xml:space="preserve"><p>[[desc]]</p>
<p><a href="[[link]]" class="hw-internal-link">Index</a></p></pb:template>
        </model><model predicate="$parameters?mode='entryview' and parent::listBibl" behaviour="block">
            <desc>View in index entry.</desc>
            <param name="shorttitle" value="title[@type='short']/string()"/>
            <param name="description" value="bibl[@type='full']/node()"/>
            <param name="related" value="relatedItem"/>
            <pb:template xmlns="" xml:space="preserve"><h1 class="index-entry-title">[[shorttitle]]</h1>
  <div class="index-entry-content">
  <p>[[description]]</p>
  <p>[[related]]</p>
</div></pb:template>
        </model><model predicate="@corresp" behaviour="inline" cssClass="hw-bibl hw-bibl-toggle">
            <desc>Reference to another index entry, with dropdown.</desc>
            <param name="default" value="string()"/>
            <param name="alternate" value="id(@corresp, doc($global:data-root || '/registers/bibliography.xml'))/bibl[@type='full']"/>
            <param name="persistent" value="true()"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover>
  <span slot="default">[[default]]</span>
  <template slot="alternate">[[alternate]]</template>
</pb-popover></pb:template>
        </model><model predicate="parent::listBibl" behaviour="listItem" cssClass="index-entry">
            <desc>List of entries for sitemap</desc>
            <param name="shorttitle" value="title[@type='short']/string()"/>
            <param name="id" value="@xml:id"/>
            <pb:template xmlns="" xml:space="preserve"><span><a href="../bibliography.xml#[[id]]">[[shorttitle]]</a></span></pb:template>
        </model></elementSpec>
                
                <elementSpec ident="title" mode="change"><model predicate="$parameters?header='short'" behaviour="block"/><model predicate="@type='short'" behaviour="heading" cssClass="index-entry-title"/><modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' — '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence><model predicate="not(@level) and parent::bibl" behaviour="inline"/><modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence><modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence><modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence><model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model></elementSpec>

                <elementSpec ident="listPerson" mode="add"><model behaviour="list" cssClass="index-list">
            <param name="content" value="for $n in .//person let $name := translate($n/persName[@type='full'], &#34;ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜäöü&#34;, &#34;abcdefghijklmnopqrstuvwxyzaouaou&#34;) order by $name return $n"/>
        </model></elementSpec>

                <elementSpec ident="persName" mode="add"><modelSequence predicate="forename and surname">
            <model behaviour="inline">
                <param name="content" value="surname"/>
                <outputRendition xml:space="preserve" scope="after">
                content: ', '
                </outputRendition>
            </model>
            <model behaviour="inline">
                <param name="content" value="forename"/>
            </model>
            <model predicate="nameLink" behaviour="inline">
                <param name="content" value="nameLink"/>
                <outputRendition xml:space="preserve" scope="before">
                content: ' '
                </outputRendition>
            </model>
        </modelSequence><modelSequence predicate="name">
            <model behaviour="inline">
                <param name="content" value="name"/>
            </model>
        </modelSequence></elementSpec>

                <elementSpec ident="person" mode="change"><model predicate="$parameters?mode='entryview'" behaviour="block">
            <param name="name" value="persName[@type=&#34;main&#34;]/string()"/>
            <param name="birth" value="birth"/>
            <param name="death" value="death"/>
            <param name="note" value="note/string()"/>
            <param name="id" value="@xml:id"/>
            <param name="gnd" value="idno[@type=&#34;GND&#34;]"/>
            <param name="dash" value="if (birth or death) then '–' else ''"/>
            <param name="nee" value="persName[@type=&#34;nee&#34;]"/>
            <param name="alter" value="persName[@type=&#34;alternative&#34;]"/>
            <param name="viaf" value="idno[@type=&#34;VIAF&#34;]"/>
            <param name="ulan" value="idno[@type=&#34;ULAN&#34;]"/>
            <pb:template xmlns="" xml:space="preserve">
                            <h1 class="index-entry-title">[[name]]</h1>
                            <div class="index-entry-content">
                              <p>[[nee]]</p>
                              <p>[[alter]]</p>
                                <p>[[birth]] [[dash]] [[death]]</p>
                                <p>[[note]]</p>
                                <p>[[gnd]] [[viaf]] [[ulan]]</p>
                            </div>
                        </pb:template>
        </model><model predicate="parent::listPerson" behaviour="listItem" cssClass="index-entry">
            <param name="name" value="persName[@type='main']"/>
            <param name="birth" value="birth/@when"/>
            <param name="death" value="death/@when"/>
            <param name="id" value="@xml:id"/>
            <param name="dash" value="if (birth or death) then '–' else ''"/>
            <pb:template xmlns="" xml:space="preserve"><span><a href="../register.xml#[[id]]">[[name]]</a>, [[birth]] [[dash]] [[death]]</span>                  </pb:template>
        </model></elementSpec>

                <elementSpec ident="list" mode="change"><model predicate="@rendition" behaviour="list" useSourceRendition="true">
            <param name="content" value="item"/>
        </model><model predicate="not(@rendition)" behaviour="list">
            <param name="content" value="item"/>
            <outputRendition xml:space="preserve">
            list-style-type: none;
            </outputRendition>
        </model></elementSpec>

                <elementSpec ident="object" mode="change"><model predicate="$parameters?mode='entryview'" behaviour="block">
            <param name="title" value="head[@type='main']/string()"/>
            <param name="author" value="note/persName/string()"/>
            <param name="city" value="note/placeName[@type='settlement']/string()"/>
            <param name="building" value="if (note/placeName[@type='address']) then concat(': ', note/placeName[@type='address']/string()) else ''"/>
            <param name="desc" value="note/p/string()"/>
            <param name="larger" value="if (note/objectName) then concat(': ', note/objectName/string()) else ''"/>
            <param name="term" value="note/term/string()"/>
            <param name="hwtitle" value="if (head[@type='hw']) then concat(' {HW: ', head[@type='hw']/string(), '}') else ''"/>
            <param name="date" value="note/date/string()"/>
            <pb:template xmlns="" xml:space="preserve"><h1 class="index-entry-title">[[title]]</h1>
<div class="index-entry-content">
<p>[[hwtitle]]</p>
<p>[[author]]</p>
<p>[[date]]</p>
<p>[[desc]]</p>
<p>[[term]][[city]][[building]][[larger]]</p>
</div></pb:template>
        </model><model predicate="parent::listObject" behaviour="listItem" cssClass="index-entry">
            <param name="title" value="head[@type='main']/string()"/>
            <param name="author" value="if (note/persName) then concat(note/persName/string(), ': ') else ''"/>
            <param name="city" value="note/placeName[@type='settlement']/string()"/>
            <param name="building" value="if (note/placeName[@type='address']) then concat(': ', note/placeName[@type='address']/string()) else ''"/>
            <param name="larger" value="if (note/term and note/objectName) then note/objectName/string() else if (note/objectName) then concat(': ', note/objectName/string()) else ''"/>
            <param name="id" value="@xml:id"/>
            <param name="hwtitle" value="if (head[@type='hw']) then concat(' {HW: ', head[@type='hw']/string(), '}') else ''"/>
            <param name="date" value="if (note/date) then concat(note/date/string(), &#34;, &#34;) else ''"/>
            <pb:template xmlns="" xml:space="preserve"><span><a href="../register.xml#[[id]]">[[title]]</a>[[hwtitle]], [[author]][[date]][[city]][[building]][[larger]]</span>
                        </pb:template>
        </model></elementSpec>

                <elementSpec ident="listObject" mode="add"><model behaviour="list" cssClass="index-list">
            <param name="content" value="for $n in .//object let $title := translate($n/head[@type='main'], &#34;ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜäöü«»&#34;, &#34;abcdefghijklmnopqrstuvwxyzaouaou&#34;) order by $title return $n"/>
        </model></elementSpec>

                <elementSpec ident="listPlace" mode="add"><model behaviour="list" cssClass="index-list">
            <param name="content" value="for $n in .//place let $name := translate($n/placeName[@type='full'], &#34;ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜäöü&#34;, &#34;abcdefghijklmnopqrstuvwxyzaouaou&#34;) order by $name return $n"/>
        </model></elementSpec>
                
                <elementSpec ident="place" mode="change"><model predicate="$parameters?mode='entryview'" behaviour="block">
            <param name="name" value="placeName/string()"/>
            <param name="note" value="note/string()"/>
            <param name="idno" value="idno"/>
            <pb:template xmlns="" xml:space="preserve">
                            <h1 class="index-entry-title">[[name]]</h1>
                            <div class="index-entry-content">
                                <p>[[note]]</p>
                                <p>[[idno]]</p>
                            </div>
                        </pb:template>
        </model><model predicate="parent::listPlace" behaviour="listItem" cssClass="index-entry">
            <param name="name" value="placeName[@type='main']/string()"/>
            <param name="note" value="note/string()"/>
            <param name="id" value="@xml:id"/>
            <pb:template xmlns="" xml:space="preserve"><span><a href="../register.xml#[[id]]">[[name]]</a>, [[note]]</span>                  </pb:template>
        </model></elementSpec>
                
                <elementSpec ident="listBibl" mode="change"><model predicate="bibl" behaviour="list" cssClass="index-list">
            <param name="content" value="for $n in ./bibl let $title := translate($n/title[@type='short'], 'ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜäöü[]', 'abcdefghijklmnopqrstuvwxyzaouaou') order by $title return $n"/>
        </model><model behaviour="block"/></elementSpec>
                
                <elementSpec ident="listOrg" mode="add"><model behaviour="list" cssClass="index-list">
            <param name="content" value="for $n in .//org let $name := translate($n/orgName[@type='full'], &#34;ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜäöü&#34;, &#34;abcdefghijklmnopqrstuvwxyzaouaou&#34;) order by $name return $n"/>
        </model></elementSpec>
                
                <elementSpec ident="org" mode="change"><model predicate="$parameters?mode='entryview'" behaviour="block">
            <param name="name" value="orgName/string()"/>
            <param name="idno" value="idno"/>
            <param name="desc" value="p/node()"/>
            <pb:template xmlns="" xml:space="preserve">
                            <h1 class="index-entry-title">[[name]]</h1>
                            <div class="index-entry-content">
                              <p>[[desc]]</p>
                              <p>[[idno]]</p>
                            </div>
                        </pb:template>
        </model><model predicate="parent::listOrg" behaviour="block" cssClass="index-entry">
            <param name="name" value="orgName[@type='main']/string()"/>
            <param name="link" value="concat(&#34;register.xml?id=index-pers#&#34;, @xml:id)"/>
            <param name="id" value="@xml:id"/>
            <pb:template xmlns="" xml:space="preserve"><span><a href="../oganisations.xml#[[id]]">[[name]]</a></span>                     </pb:template>
        </model></elementSpec>

            <elementSpec ident="idno" mode="add"><modelSequence predicate="@type='GND'">
            <model behaviour="link" cssClass="hw-external-link">
                <param name="uri" value="concat('https://explore.gnd.network/gnd/', string())"/>
                <param name="content" value="concat('GND: ', string())"/>
            </model>
        </modelSequence><modelSequence predicate="@type='VIAF'">
            <model behaviour="link" cssClass="hw-external-link">
                <param name="uri" value="concat('https://viaf.org/de/viaf/', string())"/>
                <param name="content" value="concat('VIAF: ', string())"/>
            </model>
        </modelSequence><modelSequence predicate="@type='ULAN'">
            <model behaviour="link" cssClass="hw-external-link">
                <param name="uri" value="concat('https://vocab.getty.edu/ulan/', string())"/>
                <param name="content" value="concat('ULAN: ', string())"/>
            </model>
        </modelSequence></elementSpec>
            <elementSpec ident="relatedItem" mode="change"><model behaviour="inline"/></elementSpec>
            </schemaSpec>
        </body>
    </text></TEI>