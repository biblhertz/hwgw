<?teipublisher output="web"?><TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en"><teiHeader><fileDesc>
            <titleStmt><title>Wölfflin - metadata views
                    
                    
                 
                    <desc>Critical Edition with commentaries</desc></title></titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc><encodingDesc><tagsDecl><rendition source="../css/dynamic-content.css"/></tagsDecl></encodingDesc><revisionDesc>
            <change when="2020-04-27+17:00">Initial version</change>
        </revisionDesc></teiHeader><text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="woelfflin" source="woelfflin-base.odd">
    
                <elementSpec ident="teiHeader" mode="change"><model output="web" predicate="$parameters?header='short'" behaviour="block"/><model output="web" predicate="$parameters?header='metadata'" behaviour="metadata">
            <param name="content" value="null"/>
        </model></elementSpec>
                    
                <elementSpec ident="title" mode="change"><model predicate="$parameters?mode='header'" behaviour="inline"/><model predicate="$parameters?header='short'" behaviour="block"/><model predicate="@type='short'" behaviour="heading"/><modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' — '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence><model predicate="not(@level) and parent::bibl" behaviour="inline"/><modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence><modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence><modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence><model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model></elementSpec>
    
                <elementSpec ident="div" mode="change"><model predicate="$parameters?mode='breadcrumbs'" behaviour="block">
            <param name="content" value="ancestor::div/head | head"/>
        </model><modelSequence>
            <model behaviour="inline" cssClass="hw-float-column hw-modern-pb">
                <param name="onpage" value="concat(preceding::pb[1]/@ed, ': S. ', preceding::pb[1]/@n)"/>
                <param name="popup" value="concat(root($parameters?root)//teiHeader//seriesStmt, ', S. ', preceding::pb[1]/@n, '.')"/>
                <param name="id" value="@xml:id"/>
                <pb:template xmlns="" xml:space="preserve"><pb-popover id="altref_19"><span slot="default" id="[[id]]">[[onpage]]</span><template slot="alternate" id="[[id]]"><div class="hw-pb-modern">
                [[popup]]</div></template></pb-popover></pb:template>
                <outputRendition xml:space="preserve">
                display:none;
                </outputRendition>
            </model>
            <model behaviour="index">
                <param name="type" value="'toc'"/>
            </model>
            <model predicate="string-length(normalize-space(string-join(.//node() intersect (.//pb, following::pb, .//node()[last()])[1]/preceding::node(), ''))) &gt; 0 and $parameters?view='div' and not($parameters?pbMode='off') and preceding::pb" behaviour="alternate" cssClass="hw-float-column hw-modern-pb">
                <desc>In division view, if a chapter starts in the middle of the page, extract the last page break from the previous chapter. This is determined by the content between the chapter start and the first page break from there. Formally this should be identical to the definition of page break but the mark in the text is absent.</desc>
                <param name="default" value="concat(preceding::pb[1]/@ed, ': S. ', preceding::pb[1]/@n)"/>
                <param name="alternate" value="concat(root($parameters?root)//teiHeader//seriesStmt, ', S. ', preceding::pb[1]/@n, '.')"/>
                <param name="persistent" value="true()"/>
            </model>
            <model predicate="$parameters?view='div' and descendant::head[1]" behaviour="inline">
                <param name="title" value="replace(string-join(descendant::head[not(ancestor::figure)][1]//text()[not(parent::ref)][not(ancestor::note)]), '^(.*?)[^\w]*$', '$1')"/>
                <pb:template xmlns="" xml:space="preserve"><span class="pagetitle">[[title]]</span></pb:template>
                <outputRendition xml:space="preserve">
                display: none;
                </outputRendition>
            </model>
            <model predicate="$parameters?view='div' and not(descendant::head)" behaviour="inline">
                <param name="title" value="form"/>
                <pb:template xmlns="" xml:space="preserve"><span class="pagetitle"/></pb:template>
                <outputRendition xml:space="preserve">
                display: none;
                </outputRendition>
            </model>
            <model behaviour="block"/>
        </modelSequence></elementSpec>

                <elementSpec ident="pb" mode="change"/>

                <elementSpec ident="text" mode="change"/>

                <elementSpec ident="head" mode="change"><model predicate="$parameters?mode='breadcrumbs'" behaviour="webcomponent" cssClass="hw-breadcrumbs">
            <param name="content" value="@n"/>
            <param name="emit" value="'transcription'"/>
            <param name="xml-id" value="ancestor::div[1]/@xml:id"/>
            <param name="name" value="'pb-link'"/>
            <outputRendition xml:space="preserve" scope="before">
            content: ' &gt; '
            </outputRendition>
            <outputRendition xml:space="preserve" scope="before">
            color: #A5B8BE;
            </outputRendition>
        </model><model predicate="$parameters?mode='toc'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)][not(ancestor::note)]), '^(.*?)[^\w]*$', '$1')"/>
        </model><model predicate="$parameters?header='short'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
        </model><model predicate="parent::figure" behaviour="inline"/><model predicate="parent::table" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model><model predicate="parent::lg" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model><model predicate="parent::list" behaviour="block">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model><model predicate="parent::div" behaviour="heading" useSourceRendition="true">
            <param name="level" value="count(ancestor::div)"/>
        </model><model behaviour="block"/></elementSpec>

                <elementSpec ident="rs" mode="change"><model predicate="$parameters?mode='toc'" behaviour="inline">
            <outputRendition xml:space="preserve">
            background-color:yellow;
            </outputRendition>
        </model></elementSpec>

            <elementSpec ident="divGen" mode="add"><model predicate="$parameters?mode='breadcrumbs'" behaviour="block">
            <param name="content" value="ancestor::div/head | head"/>
        </model></elementSpec><elementSpec ident="p" mode="change"><model predicate="$parameters?mode='breadcrumbs'" behaviour="block">
            <desc>Breadcrumbs when a paragraph is more than a page</desc>
            <param name="content" value="ancestor::div/head"/>
        </model><modelSequence>
            <model behaviour="index">
                <param name="type" value="'toc'"/>
            </model>
            <model behaviour="block" cssClass="p-indent" useSourceRendition="true">
                <outputRendition xml:space="preserve">
                
                </outputRendition>
            </model>
        </modelSequence></elementSpec><elementSpec ident="change" mode="add"><model behaviour="inline">
            <param name="content" value="'Letzte Änderung: ' || string-join(reverse(tokenize(@when, '-')), '.')"/>
        </model></elementSpec></schemaSpec>
        </body>
    </text></TEI>